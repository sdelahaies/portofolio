// @flow strict

import { personalData } from "@/utils/data/personal-data";
// import BlogCard from "../components/homepage/blog/blog-card";
// import BlogCard from "../components/homepage/blog/blog-card-2";
import { blogData } from '@/utils/data/blog-data';


async function page() {
    return (
        <div className="py-8">
            <div className="flex justify-center my-5 lg:py-8">
                <div className="flex  items-center">
                    <span className="w-24 h-[2px] bg-[#1a1443]"></span>
                    <span className="bg-[#1a1443] w-fit text-white p-2 px-5 text-2xl rounded-md">
                        Research & Projects
                    </span>
                    <span className="w-24 h-[2px] bg-[#1a1443]"></span>
                </div>
            </div>

            {/* <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 md:gap-5 lg:gap-8 xl:gap-10">
    
      </div> */}
<div style={{ padding: "20px", lineHeight: "1.6", fontFamily: "Arial, sans-serif" }}>
            <h1>Introducing Flowizer: Agentic Workflows for Modern AI</h1>

            <p>
                The recent surge in AI technologies, particularly with the development of
                large language models (LLMs), has popularized the agentic paradigm.
                Frameworks like <strong>LangChain</strong>, <strong>Flowise</strong>, and
                <strong> Weaviate</strong> demonstrate the power of agents in executing
                complex tasks by reasoning, planning, and acting autonomously. Inspired
                by this paradigm, <strong>Flowizer</strong> offers a unique way to design
                workflows, leveraging the power of directed acyclic graphs (DAGs) and a
                pub/sub messaging system.
            </p>

            <h2>What is Flowizer?</h2>
            <p>
                Flowizer is a Python library designed to create, manipulate, and execute
                workflows. A workflow in Flowizer is represented as a directed acyclic
                graph (DAG), where <strong>nodes</strong> represent processes (or tasks)
                and <strong>edges</strong> represent the flow of data between them.
                Flowizer uses a publish/subscribe (pub/sub) system to manage
                inter-node communication and relies on YAML configuration files to
                define the structure of workflows.
            </p>

            <h2>Core Features</h2>

            <h3>Agentic Nodes</h3>
            <p>
                In Flowizer, each node is an independent agent capable of:
            </p>
            <ul>
                <li>
                    Listening for messages (or events) in a pub/sub system using a
                    topic-based approach.
                </li>
                <li>
                    Executing predefined or custom logic based on its type and
                    configuration.
                </li>
                <li>
                    Passing its output as input to downstream nodes in the workflow.
                </li>
            </ul>

            <h3>Flexible Node Execution</h3>
            <p>
                Each node operates autonomously, ensuring that all upstream dependencies
                are met before execution. Node behavior is determined by:
            </p>
            <ul>
                <li><strong>Input:</strong> The data received from upstream nodes.</li>
                <li><strong>Parameters:</strong> Node-specific configurations defined in
                    the YAML file.
                </li>
                <li><strong>Output:</strong> Data generated by the node's execution,
                    which is passed downstream.
                </li>
            </ul>

            <h3>YAML Configuration Files</h3>
            <p>
                Workflows in Flowizer are initialized with a YAML configuration file.
                This file defines the structure of the DAG, including:
            </p>
            <ul>
                <li><strong>Node Names:</strong> Unique identifiers for each node.</li>
                <li><strong>Node Types:</strong> Corresponding to specific functions or
                    processes.
                </li>
                <li><strong>Dependencies:</strong> Upstream and downstream
                    relationships between nodes.
                </li>
                <li><strong>Parameters:</strong> Additional configuration details for
                    each node.
                </li>
            </ul>

            <h2>The Power of the Pub/Sub System</h2>
            <p>
                At the heart of Flowizer is its pub/sub messaging system. Each node in a
                workflow subscribes to a unique topic (its name). When a node completes
                its execution, it publishes messages to the topics of its downstream
                nodes. This mechanism ensures seamless communication and synchronization
                across the workflow.
            </p>

            <h2>Customizability and Extensibility</h2>
            <p>
                Flowizer is designed to be flexible. While it comes with a set of
                predefined functions, users can extend its functionality by creating
                custom functions. By setting the <code>PYDAGFLOW_DEVPATH</code> (or the
                analogous Flowizer path) environment variable, developers can add their
                custom logic to the system.
            </p>
            <p>
                For instance, a custom node function might analyze text, transform data,
                or call external APIs. This ability to integrate custom logic makes
                Flowizer a powerful tool for diverse applications, including LLM-based
                agents, data pipelines, and automated workflows.
            </p>

            <h2>Workflow Example</h2>
            <p>
                Consider a simple workflow with nodes performing OCR, extracting data,
                and writing results. Each node executes autonomously but collaborates by
                passing data downstream:
            </p>
            <pre style={{ background: "#1a1443", padding: "10px", overflowX: "auto" }}>
{`input={
    'PaddleOCR': {'text': 'Invoice content here'}
}

output={
    'RegexSirenPad': {
        'siren': '12345',
        'siret': '67890',
    }
}`}
            </pre>

            <p>
                Nodes hydrate their inputs and outputs dynamically, creating a seamless
                data flow across the DAG.
            </p>

            <h2>Agentic Frameworks and Flowizer</h2>
            <p>
                With the rise of frameworks like LangChain and Flowise, which focus on
                enabling LLM-based agents to reason and act, Flowizer provides a
                complementary approach for orchestrating agentic workflows. It empowers
                developers to design and execute complex, dynamic systems where each
                component operates autonomously yet collaboratively.
            </p>

            <h2>Conclusion</h2>
            <p>
                Flowizer brings the flexibility of DAGs and the simplicity of YAML
                configuration to the forefront, enabling developers to build and run
                robust workflows with ease. By incorporating the agentic paradigm,
                Flowizer aligns itself with the needs of modern AI-driven projects,
                making it a valuable tool in the developer's arsenal.
            </p>

            <p>
                Whether you're orchestrating AI models, automating data processing, or
                building agentic systems, Flowizer is a powerful ally. Start exploring
                today and transform your workflows into intelligent, autonomous
                processes.
            </p>
        </div>
 </div>

  );
};

export default page;